[{"/Users/macbook/Desktop/songbirds/src/index.js":"1","/Users/macbook/Desktop/songbirds/src/App.js":"2","/Users/macbook/Desktop/songbirds/src/components/BirdsApp/BirdsApp.js":"3","/Users/macbook/Desktop/songbirds/src/birdsData.js":"4","/Users/macbook/Desktop/songbirds/src/components/Question/Question.js":"5","/Users/macbook/Desktop/songbirds/src/components/EndGame/EndGame.js":"6","/Users/macbook/Desktop/songbirds/src/components/CurrentAnswer/CurrentAnswer.js":"7","/Users/macbook/Desktop/songbirds/src/components/NextStep/NextStep.js":"8","/Users/macbook/Desktop/songbirds/src/components/Answers/Answers.js":"9","/Users/macbook/Desktop/songbirds/src/components/Header/Header.js":"10","/Users/macbook/Desktop/songbirds/src/components/Answers/Circle.js":"11","/Users/macbook/Desktop/songbirds/src/components/Items/Items.js":"12"},{"size":195,"mtime":1617253585921,"results":"13","hashOfConfig":"14"},{"size":224,"mtime":1617254397289,"results":"15","hashOfConfig":"14"},{"size":2992,"mtime":1617253585913,"results":"16","hashOfConfig":"14"},{"size":28390,"mtime":1617253585908,"results":"17","hashOfConfig":"14"},{"size":1667,"mtime":1617253585921,"results":"18","hashOfConfig":"14"},{"size":548,"mtime":1617253585918,"results":"19","hashOfConfig":"14"},{"size":1560,"mtime":1617253585917,"results":"20","hashOfConfig":"14"},{"size":481,"mtime":1617253585920,"results":"21","hashOfConfig":"14"},{"size":1293,"mtime":1617253585908,"results":"22","hashOfConfig":"14"},{"size":1183,"mtime":1617253585919,"results":"23","hashOfConfig":"14"},{"size":648,"mtime":1617253585909,"results":"24","hashOfConfig":"14"},{"size":556,"mtime":1617253585920,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1vavfyt",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},"/Users/macbook/Desktop/songbirds/src/index.js",[],["54","55"],"/Users/macbook/Desktop/songbirds/src/App.js",[],"/Users/macbook/Desktop/songbirds/src/components/BirdsApp/BirdsApp.js",["56"],"import React, {useState, useEffect} from 'react';\nimport birdsData from \"../../birdsData\";\nimport Question from \"../Question/Question\";\nimport CurrentAnswer from \"../CurrentAnswer/CurrentAnswer\";\nimport Answers from \"../Answers/Answers\";\nimport NextStep from \"../NextStep/NextStep\";\nimport EndGame from \"../EndGame/EndGame\";\nimport Header from \"../Header/Header\";\nimport correct from './jg-032316-sfx-elearning-correct-answer-sound-1.mp3'\nimport wrong from './z_uk-proigrysha.mp3'\n\nconst BirdsApp = () => {\n    const [question, setQuestion] = useState({})\n    const [step, setStep] = useState(1)\n    const [selectedAnswer, setSelectedAnswer] = useState({})\n    const [isRightAnswer, setIsRightAnswer] = useState(false)\n    const [points, setPoints] = useState(0)\n    const [wrongAnswers, setWrongAnswers] = useState([])\n    const isCurrentAnswerRight = () => {\n        if (selectedAnswer.id === question.id) {\n            setIsRightAnswer(true)\n            new Audio(correct).play()\n        } else {\n            setIsRightAnswer(false)\n            new Audio(wrong).play()\n\n        }\n    }\n    let currentAnswers = birdsData[step - 1]\n\n    useEffect(() => {\n        setCurrentQuestion()\n    }, [currentAnswers])\n\n    useEffect(() => {\n        isCurrentAnswerRight()\n    })\n\n    const resetAll = () => {\n        setQuestion({})\n        setSelectedAnswer({})\n        setStep(1)\n        setIsRightAnswer(false)\n    }\n    const setCurrentQuestion = () => {\n        if(currentAnswers){\n            const questionId = (getRandomAudio(1, currentAnswers.length))\n            const question = currentAnswers.find(el => el.id === questionId)\n            setQuestion(question)\n        }\n    }\n\n    const getRandomAudio = (min, max) => Math.floor(Math.random() * (max - min) + min)\n\n    return (\n        <div className='app'>\n            <div className=\"container\">\n                <Header points={points} step={step}/>\n                {\n                    step - 1 < birdsData.length\n                        ? <>\n                            <Question selectedAnswer={selectedAnswer} question={question}/>\n                            <div className=\"App__answers-and-info\">\n                                <CurrentAnswer question={question} isRightAnswer={isRightAnswer} setSelectedAnswer={setSelectedAnswer} selectedAnswer={selectedAnswer} currentAnswers={currentAnswers} step={step} setStep={setStep} points={points} setPoints={setPoints} wrongAnswers={wrongAnswers} setWrongAnswers={setWrongAnswers}/>\n                                <Answers selectedAnswer={selectedAnswer}/>\n                            </div>\n                            <NextStep isRightAnswer={isRightAnswer} setStep={setStep} step={step} setSelectedAnswer={setSelectedAnswer} setWrongAnswers={setWrongAnswers} wrongAnswers={wrongAnswers}/>\n                        </>\n                        : <EndGame points={points} resetAll={resetAll} />\n                }\n            </div>\n        </div>\n    );\n};\n\nexport default BirdsApp;","/Users/macbook/Desktop/songbirds/src/birdsData.js",[],"/Users/macbook/Desktop/songbirds/src/components/Question/Question.js",[],"/Users/macbook/Desktop/songbirds/src/components/EndGame/EndGame.js",[],"/Users/macbook/Desktop/songbirds/src/components/CurrentAnswer/CurrentAnswer.js",["57"],"import React, {useEffect} from 'react';\nimport Circle from '../Answers/Circle'\n\nconst CurrentAnswer = ({question, currentAnswers, selectedAnswer, setSelectedAnswer, isRightAnswer, setPoints, points, wrongAnswers, step, setWrongAnswers}) => {\n    const rightAnswer = (item) => {\n        setSelectedAnswer({...item, isChecked: true})\n    }\n    useEffect(() => {\n        console.log(selectedAnswer)\n        if (Object.keys(selectedAnswer).length > 0){\n            if (selectedAnswer.id === question.id){\n                let pts = points + 5 - wrongAnswers.length;\n                setPoints(pts)\n            }\n            else{\n                let exists = wrongAnswers.find(el => el.id === selectedAnswer.id)\n                if(!exists) {\n                    wrongAnswers.push({...selectedAnswer})\n                }\n            }\n        }\n\n    }, [selectedAnswer])\n    return (\n        <>\n            <div className=\"answers\">\n                {\n                    currentAnswers.map(el => (\n                        <button\n                            key={el.id}\n                            onClick={() => rightAnswer(el)}\n                            disabled={isRightAnswer}\n                            className='answers__button'>\n                                <Circle question={question} selectedAnswer={selectedAnswer} currentAnswers={currentAnswers} index={el.id}/>\n                                {el.name}\n                        </button>\n                    ))\n                }\n            </div>\n        </>\n    );\n};\n\nexport default CurrentAnswer;","/Users/macbook/Desktop/songbirds/src/components/NextStep/NextStep.js",[],"/Users/macbook/Desktop/songbirds/src/components/Answers/Answers.js",[],"/Users/macbook/Desktop/songbirds/src/components/Header/Header.js",[],"/Users/macbook/Desktop/songbirds/src/components/Answers/Circle.js",[],"/Users/macbook/Desktop/songbirds/src/components/Items/Items.js",[],["58","59"],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":33,"column":8,"nodeType":"66","endLine":33,"endColumn":24,"suggestions":"67"},{"ruleId":"64","severity":1,"message":"68","line":23,"column":8,"nodeType":"66","endLine":23,"endColumn":24,"suggestions":"69"},{"ruleId":"60","replacedBy":"70"},{"ruleId":"62","replacedBy":"71"},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setCurrentQuestion'. Either include it or remove the dependency array.","ArrayExpression",["74"],"React Hook useEffect has missing dependencies: 'points', 'question.id', 'setPoints', and 'wrongAnswers'. Either include them or remove the dependency array. If 'setPoints' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["75"],["72"],["73"],"no-global-assign","no-unsafe-negation",{"desc":"76","fix":"77"},{"desc":"78","fix":"79"},"Update the dependencies array to be: [currentAnswers, setCurrentQuestion]",{"range":"80","text":"81"},"Update the dependencies array to be: [points, question.id, selectedAnswer, setPoints, wrongAnswers]",{"range":"82","text":"83"},[1193,1209],"[currentAnswers, setCurrentQuestion]",[845,861],"[points, question.id, selectedAnswer, setPoints, wrongAnswers]"]